# helm template --values dev/values.yaml .             
---
# Source: standard-application/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: moviesbackend
  namespace: moviesbackend
  labels:
    helm.sh/chart: standard-application-1.0.11
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 80
      protocol: TCP
      targetPort: 80
  selector:
    app.selector: moviesbackend
---
# Source: standard-application/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: moviesbackend
  namespace: moviesbackend
  labels:
    helm.sh/chart: standard-application-1.0.11
    app.kubernetes.io/managed-by: Helm
    app.selector: moviesbackend
    app: moviesbackend
spec:
  replicas: 1
  selector:
    matchLabels:
      app.selector: moviesbackend
  template:
    metadata:
      annotations:
        {}
      labels:
        app.selector: moviesbackend
        app: moviesbackend
    spec:

      containers:
        # Container 0 - moviesbackend
        - name: moviesbackend
          image: "public.ecr.aws/o8i1z9b2/moviesbackend:0.1.0"
          imagePullPolicy: Always
          env:
          # perEnv
          - name: DATABASECONNECTION
            value: mysql://burntdvds:BuRnTdVdS8902348.ovusoiud@moviesbackend-aurora-mysql.cluster-cpplozvqfo9h.eu-west-1.rds.amazonaws.com/burntdvds
          - name: CONFIGENV
            value: moviesbackend.config.TestingConfig
          - name: WORKERS
            value: "2"
          - name: WEBSERVPORT
            value: "80"

          # START: ports
          ports:
          # Port 0
          - containerPort: 80
            protocol: TCP
            name: https
          # END: ports
          resources:
            limits:
              cpu: 1500m
              memory: 128Mi
            requests:
              cpu: 500m
              memory: 64Mi

          securityContext:
            {}
---
# Source: standard-application/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: moviesbackend
  namespace: moviesbackend
  labels:
    helm.sh/chart: standard-application-1.0.11
    app.kubernetes.io/managed-by: Helm
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt
    external-dns.alpha.kubernetes.io/hostname: moviesbackend.k8s.dev.mpeschke.org
    kubernetes.io/api: app/v1
    kubernetes.io/ingress.class: nginx

spec:
  tls:
    - hosts:
        - "moviesbackend.k8s.dev.mpeschke.org"
      secretName: tls-moviesbackend
  rules:
    - host: "moviesbackend.k8s.dev.mpeschke.org"
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: moviesbackend
                port:
                  number: 80
---
# Source: standard-application/templates/service.yaml
# Only create a service if the Deployment has exposed a port